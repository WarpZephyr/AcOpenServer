// Credit: This file is based on protobufs found in ds3os by Tim Leonard.
// Original Credit from ds3os Shared_Frpg2RequestMessage.proto: A lot of information here has been derived from the protobufs of AmirBohd's ModEngine2.

syntax = "proto2";
option optimize_for = LITE_RUNTIME;
package SVFWRequestMessage;

// ------------------------------------------------------------------------------------------------------------
// Login Server Messages
// ------------------------------------------------------------------------------------------------------------

// First message sent to the login server, used to request
// the port and server_ip to authenticate over.
message RequestQueryLoginServerInfo {
    required string player_id = 1;
    optional string f2 = 2;
    required uint64 app_version = 3;
}

// Send in response to RequestQueryLoginServerInfo
message RequestQueryLoginServerInfoResponse {
    required uint32 port = 1;
    optional uint32 unk2 = 2; // IP address?
    optional uint32 unk3 = 3;
}

// ------------------------------------------------------------------------------------------------------------
// Auth Server Messages
// ------------------------------------------------------------------------------------------------------------

// First message sent to auth server RSA encrypted. Provides a CWC key used
// for encrypting the rest of the traffic.
message RequestHandshake {
    required bytes aes_cwc_key = 1;
}

// Response to initial message, encrypted with CWC.
message RequestHandshakeResponse {
}

// Sent after handshake, all seemingly constant data (apart from the player_id). 
// Presumably used for ensure we are connecting to a compatible server?
message GetServiceStatus {
    required uint32 id = 1;              
    required string player_id = 2;
    optional string unk3 = 3;
    required uint64 app_version = 4;
}

// Response to GetServiceStatus, contains identical data to what is sent
// with the exception of a blank player_id. Presumably if we connected to a dev server
// or something we would get different responses.
// If we are on an older version of the game an empty response is sent back for this.
message GetServiceStatusResponse {
    optional uint32 id = 1;
    optional string player_id = 2;
    optional int32 unk3 = 3;
    optional int32 app_version = 4;
}